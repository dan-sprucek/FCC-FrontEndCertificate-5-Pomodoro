{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","minutes","setMinutes","seconds","setSeconds","running","setRunning","sessionInProgress","setSessionInProgress","handleClick","event","currentTarget","id","document","getElementById","pause","currentTime","useEffect","interval","setInterval","play","prevSeconds","prevMinutes","clearInterval","className","style","maxWidth","width","onClick","toString","padStart","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad844a1c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5)\n  const [sessionLength, setSessionLength] = useState(25)\n  const [minutes, setMinutes] = useState(25)\n  const [seconds, setSeconds] = useState(0)\n  const [running, setRunning] = useState(false)\n  const [sessionInProgress, setSessionInProgress] = useState(true)\n\n  const handleClick = (event) => {\n    if (event.currentTarget.id === \"break-decrement\") {\n      if (breakLength !== 1) {\n        setBreakLength(breakLength - 1) \n      }\n    } else if (event.currentTarget.id === \"break-increment\") {\n      if (breakLength !== 60) {\n        setBreakLength(breakLength + 1) \n      }\n    } else if (event.currentTarget.id === \"session-decrement\") {\n      if (sessionLength !== 1) {\n        setSessionLength(sessionLength - 1)\n        if (!running && sessionInProgress) {\n          setMinutes(sessionLength - 1)\n          setSeconds(0)\n        } \n      }\n    } else if (event.currentTarget.id === \"session-increment\") {\n      if (sessionLength !== 60) {\n        setSessionLength(sessionLength + 1) \n        if (!running && sessionInProgress) {\n          setMinutes(sessionLength + 1)\n          setSeconds(0)\n        } \n      }\n    } else if (event.currentTarget.id === \"start_stop\") {\n        setRunning(!running)\n    } else if (event.currentTarget.id === \"reset\") {\n      setBreakLength(5)\n      setSessionLength(25)\n      setMinutes(25)\n      setSeconds(0)\n      setRunning(false)\n      setSessionInProgress(true)\n      document.getElementById(\"beep\").pause()\n      document.getElementById(\"beep\").currentTime = 0\n    }\n  }\n\n  useEffect(() => {\n    let interval\n    if (running) {\n      interval = setInterval(() => {\n        if (seconds === 0 && minutes === 0) {\n          setSeconds(0)\n          setSessionInProgress(!sessionInProgress)\n          setMinutes(sessionInProgress ? breakLength : sessionLength)\n        } else if (seconds === 1 && minutes === 0) {\n          document.getElementById(\"beep\").play()\n          setSeconds(prevSeconds => prevSeconds - 1)\n        } else if (seconds === 0) {\n          setMinutes(prevMinutes => prevMinutes - 1)\n          setSeconds(59)\n        } else {\n          setSeconds(prevSeconds => prevSeconds - 1)\n        }\n      }, 1000)\n    } return () => clearInterval(interval)\n  }\n  )\n\n  return (\n    <div className=\"App vh-100 d-flex align-items-center justify-content-center\">\n      <div className=\"d-flex flex-column align-items-center container\">\n        <h1 className=\"text-center mb-3\">POMODORO CLOCK</h1>\n        <div className=\"row container\" style={{maxWidth: 500}}>\n          <div className=\"col-12 col-sm-6 d-flex flex-column align-items-center\">\n            <h3 className=\"text-center\" id=\"break-label\">Break Length</h3>\n            <div className=\"d-flex justify-content-between\" style={{width: 125}}>\n              <i className=\"fa fa-arrow-down fa-2x\" onClick={handleClick} id=\"break-decrement\"></i>\n              <h3 id=\"break-length\">{breakLength}</h3>\n              <i className=\"fa fa-arrow-up fa-2x\" onClick={handleClick} id=\"break-increment\"></i>\n            </div>\n          </div>\n          <div className=\"col-12 col-sm-6 d-flex flex-column align-items-center\">\n            <h3 className=\"text-center\" id=\"break-label\">Session Length</h3>\n            <div className=\"d-flex justify-content-between\" style={{width: 125}}>\n              <i className=\"fa fa-arrow-down fa-2x\" onClick={handleClick} id=\"session-decrement\"></i>\n              <h3 id=\"session-length\">{sessionLength}</h3>\n              <i className=\"fa fa-arrow-up fa-2x\" onClick={handleClick} id=\"session-increment\"></i>\n            </div>\n          </div>\n        </div>\n        <br />\n        <div id=\"sessionBorder\" className=\"d-flex flex-column align-items-center border border-danger rounded p-2 pl-3 pr-3 mb-2\" style={{width: 150}}>\n          <h2 id=\"timer-label\">{sessionInProgress ? \"Session\" : \"Break\"}</h2>\n          <h1 id=\"time-left\">\n            {minutes.toString().padStart(2, 0)}:{seconds.toString().padStart(2, 0)}\n          </h1>\n        </div>\n        <div className=\"d-flex justify-content-between\" style={{width: 70}}>\n          <span id=\"start_stop\" onClick={handleClick}>\n            <i className=\"fa fa-play fa-lg\"></i>\n            <i className=\"fa fa-pause fa-lg\"></i>\n          </span>\n          <span id=\"reset\" onClick={handleClick}>\n            <i className=\"fa fa-refresh fa-lg\"></i>\n          </span>\n        </div>\n        <div>\n          <audio id=\"beep\" src=\"./sound/beep.wav\"></audio>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// User Story #26: When a countdown reaches zero (NOTE: timer MUST reach 00:00), a sound indicating that time is up should play. This should utilize an HTML5 audio tag and have a corresponding id=\"beep\".\n\n// User Story #27: The audio element with id=\"beep\" must be 1 second or longer.\n\n// User Story #28: The audio element with id of beep must stop playing and be rewound to the beginning when the element with the id of reset is clicked.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}